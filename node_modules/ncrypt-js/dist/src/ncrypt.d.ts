/**
 * @class Ncrypt
 * @type {Ncrypt.<object>}
 */
export default class Ncrypt {
    /**
     * encryption secret.
     * @type {secret.<string>} secret
     */
    private secret;
    /**
     * algorithm used for encoding message
     */
    private readonly algorithm;
    /**
     * ecoding for encrypted stirng
     */
    private readonly enc;
    /**
     * crypto random initial vector generated from core node {crypto} module
     */
    private readonly initialVector;
    /**
     * crypto random key generated from core node {crypto} module
     * {note}: please read the value for KEY from your app's environment
     */
    private readonly key;
    /**
     * object constructor
     * @param {secret.<string>} secret
     */
    constructor(secret: string);
    /**
     * convert all entered text to decimal equivalent character codes
     * @param {text.<string>} text to be converted
     * @return {Array.<number>} array of character codes
     */
    private convertTextToDecimal;
    /**
     * encode provided secret on decimal character codes
     * @param {charCode.<number, number[]>} charCodes
     * @returns {*.<number>} decimal string
     */
    private applySecretToCharacters;
    /**
     * convert character bytes to hexadecimal equivalent
     * @param {number.<number>} number
     * @returns {*.<string>} hexadecimal string
     */
    private convertByteToHexadecimal;
    /**
     * intermediate data encoder function
     * @param {string.<any>} text
     * @param secret
     * @returns {string} encrypted or cipher text
     */
    private encode;
    /**
     * intermediate data decoder function
     * @param {string.<any>} text
     * @returns {string.<string>} decrypted data
     */
    private decode;
    /**
     * generate random strings
     * @example
     *
     * var fs = require('fs');
     * var ncrypt = require('ncrypt-js');
     *
     * console.log(ncrypt.randomString(8, 'base64')); // g3lzZ48TW6w==
     *
     * @param {size.<number>} size
     * @param {enc.<string>} enc
     * @returns {*.<string>} string
     */
    static randomString(size?: number, enc?: 'hex' | 'base64'): string;
    /**
     * data to be encrypted
     * @param {data.<stirng>} data
     * @returns {*.<string>} encrypted text
     */
    encrypt(data: string | number | boolean | object): string;
    /**
     * text be decrypted
     * @param {text.<stirng>} text
     * @returns {*.<string>} decrypted data
     */
    decrypt(text: string): string | number | boolean | object;
}
